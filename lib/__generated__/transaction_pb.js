/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var access_path_pb = require('./access_path_pb.js');
goog.object.extend(proto, access_path_pb);
var events_pb = require('./events_pb.js');
goog.object.extend(proto, events_pb);
var proof_pb = require('./proof_pb.js');
goog.object.extend(proto, proof_pb);
var transaction_info_pb = require('./transaction_info_pb.js');
goog.object.extend(proto, transaction_info_pb);
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
goog.exportSymbol('proto.types.AccountState', null, global);
goog.exportSymbol('proto.types.Module', null, global);
goog.exportSymbol('proto.types.Program', null, global);
goog.exportSymbol('proto.types.RawTransaction', null, global);
goog.exportSymbol('proto.types.Script', null, global);
goog.exportSymbol('proto.types.SignedTransaction', null, global);
goog.exportSymbol('proto.types.SignedTransactionWithProof', null, global);
goog.exportSymbol('proto.types.SignedTransactionsBlock', null, global);
goog.exportSymbol('proto.types.TransactionArgument', null, global);
goog.exportSymbol('proto.types.TransactionArgument.ArgType', null, global);
goog.exportSymbol('proto.types.TransactionListWithProof', null, global);
goog.exportSymbol('proto.types.TransactionToCommit', null, global);
goog.exportSymbol('proto.types.WriteOp', null, global);
goog.exportSymbol('proto.types.WriteOpType', null, global);
goog.exportSymbol('proto.types.WriteSet', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.RawTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.types.RawTransaction.oneofGroups_);
};
goog.inherits(proto.types.RawTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.RawTransaction.displayName = 'proto.types.RawTransaction';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.types.RawTransaction.oneofGroups_ = [[3,4,8,9]];

/**
 * @enum {number}
 */
proto.types.RawTransaction.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  PROGRAM: 3,
  WRITE_SET: 4,
  SCRIPT: 8,
  MODULE: 9
};

/**
 * @return {proto.types.RawTransaction.PayloadCase}
 */
proto.types.RawTransaction.prototype.getPayloadCase = function() {
  return /** @type {proto.types.RawTransaction.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.types.RawTransaction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.RawTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.types.RawTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.RawTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.RawTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderAccount: msg.getSenderAccount_asB64(),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    program: (f = msg.getProgram()) && proto.types.Program.toObject(includeInstance, f),
    writeSet: (f = msg.getWriteSet()) && proto.types.WriteSet.toObject(includeInstance, f),
    script: (f = msg.getScript()) && proto.types.Script.toObject(includeInstance, f),
    module: (f = msg.getModule()) && proto.types.Module.toObject(includeInstance, f),
    maxGasAmount: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    gasUnitPrice: jspb.Message.getFieldWithDefault(msg, 6, "0"),
    expirationTime: jspb.Message.getFieldWithDefault(msg, 7, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.RawTransaction}
 */
proto.types.RawTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.RawTransaction;
  return proto.types.RawTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.RawTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.RawTransaction}
 */
proto.types.RawTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderAccount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setSequenceNumber(value);
      break;
    case 3:
      var value = new proto.types.Program;
      reader.readMessage(value,proto.types.Program.deserializeBinaryFromReader);
      msg.setProgram(value);
      break;
    case 4:
      var value = new proto.types.WriteSet;
      reader.readMessage(value,proto.types.WriteSet.deserializeBinaryFromReader);
      msg.setWriteSet(value);
      break;
    case 8:
      var value = new proto.types.Script;
      reader.readMessage(value,proto.types.Script.deserializeBinaryFromReader);
      msg.setScript(value);
      break;
    case 9:
      var value = new proto.types.Module;
      reader.readMessage(value,proto.types.Module.deserializeBinaryFromReader);
      msg.setModule(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMaxGasAmount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGasUnitPrice(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setExpirationTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.RawTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.RawTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.RawTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.RawTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSequenceNumber();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getProgram();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.types.Program.serializeBinaryToWriter
    );
  }
  f = message.getWriteSet();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.types.WriteSet.serializeBinaryToWriter
    );
  }
  f = message.getScript();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.types.Script.serializeBinaryToWriter
    );
  }
  f = message.getModule();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.types.Module.serializeBinaryToWriter
    );
  }
  f = message.getMaxGasAmount();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      5,
      f
    );
  }
  f = message.getGasUnitPrice();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      6,
      f
    );
  }
  f = message.getExpirationTime();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      7,
      f
    );
  }
};


/**
 * optional bytes sender_account = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.RawTransaction.prototype.getSenderAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sender_account = 1;
 * This is a type-conversion wrapper around `getSenderAccount()`
 * @return {string}
 */
proto.types.RawTransaction.prototype.getSenderAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderAccount()));
};


/**
 * optional bytes sender_account = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderAccount()`
 * @return {!Uint8Array}
 */
proto.types.RawTransaction.prototype.getSenderAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderAccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.RawTransaction.prototype.setSenderAccount = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 sequence_number = 2;
 * @return {string}
 */
proto.types.RawTransaction.prototype.getSequenceNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.types.RawTransaction.prototype.setSequenceNumber = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional Program program = 3;
 * @return {?proto.types.Program}
 */
proto.types.RawTransaction.prototype.getProgram = function() {
  return /** @type{?proto.types.Program} */ (
    jspb.Message.getWrapperField(this, proto.types.Program, 3));
};


/** @param {?proto.types.Program|undefined} value */
proto.types.RawTransaction.prototype.setProgram = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.types.RawTransaction.oneofGroups_[0], value);
};


proto.types.RawTransaction.prototype.clearProgram = function() {
  this.setProgram(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.RawTransaction.prototype.hasProgram = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional WriteSet write_set = 4;
 * @return {?proto.types.WriteSet}
 */
proto.types.RawTransaction.prototype.getWriteSet = function() {
  return /** @type{?proto.types.WriteSet} */ (
    jspb.Message.getWrapperField(this, proto.types.WriteSet, 4));
};


/** @param {?proto.types.WriteSet|undefined} value */
proto.types.RawTransaction.prototype.setWriteSet = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.types.RawTransaction.oneofGroups_[0], value);
};


proto.types.RawTransaction.prototype.clearWriteSet = function() {
  this.setWriteSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.RawTransaction.prototype.hasWriteSet = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Script script = 8;
 * @return {?proto.types.Script}
 */
proto.types.RawTransaction.prototype.getScript = function() {
  return /** @type{?proto.types.Script} */ (
    jspb.Message.getWrapperField(this, proto.types.Script, 8));
};


/** @param {?proto.types.Script|undefined} value */
proto.types.RawTransaction.prototype.setScript = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.types.RawTransaction.oneofGroups_[0], value);
};


proto.types.RawTransaction.prototype.clearScript = function() {
  this.setScript(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.RawTransaction.prototype.hasScript = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Module module = 9;
 * @return {?proto.types.Module}
 */
proto.types.RawTransaction.prototype.getModule = function() {
  return /** @type{?proto.types.Module} */ (
    jspb.Message.getWrapperField(this, proto.types.Module, 9));
};


/** @param {?proto.types.Module|undefined} value */
proto.types.RawTransaction.prototype.setModule = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.types.RawTransaction.oneofGroups_[0], value);
};


proto.types.RawTransaction.prototype.clearModule = function() {
  this.setModule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.RawTransaction.prototype.hasModule = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint64 max_gas_amount = 5;
 * @return {string}
 */
proto.types.RawTransaction.prototype.getMaxGasAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/** @param {string} value */
proto.types.RawTransaction.prototype.setMaxGasAmount = function(value) {
  jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional uint64 gas_unit_price = 6;
 * @return {string}
 */
proto.types.RawTransaction.prototype.getGasUnitPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/** @param {string} value */
proto.types.RawTransaction.prototype.setGasUnitPrice = function(value) {
  jspb.Message.setProto3StringIntField(this, 6, value);
};


/**
 * optional uint64 expiration_time = 7;
 * @return {string}
 */
proto.types.RawTransaction.prototype.getExpirationTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/** @param {string} value */
proto.types.RawTransaction.prototype.setExpirationTime = function(value) {
  jspb.Message.setProto3StringIntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Program = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Program.repeatedFields_, null);
};
goog.inherits(proto.types.Program, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.Program.displayName = 'proto.types.Program';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Program.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Program.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Program.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Program} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Program.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: msg.getCode_asB64(),
    argumentsList: jspb.Message.toObjectList(msg.getArgumentsList(),
    proto.types.TransactionArgument.toObject, includeInstance),
    modulesList: msg.getModulesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Program}
 */
proto.types.Program.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Program;
  return proto.types.Program.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Program} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Program}
 */
proto.types.Program.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.types.TransactionArgument;
      reader.readMessage(value,proto.types.TransactionArgument.deserializeBinaryFromReader);
      msg.addArguments(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addModules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Program.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Program.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Program} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Program.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getArgumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.types.TransactionArgument.serializeBinaryToWriter
    );
  }
  f = message.getModulesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes code = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.Program.prototype.getCode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes code = 1;
 * This is a type-conversion wrapper around `getCode()`
 * @return {string}
 */
proto.types.Program.prototype.getCode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCode()));
};


/**
 * optional bytes code = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCode()`
 * @return {!Uint8Array}
 */
proto.types.Program.prototype.getCode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCode()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Program.prototype.setCode = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated TransactionArgument arguments = 2;
 * @return {!Array<!proto.types.TransactionArgument>}
 */
proto.types.Program.prototype.getArgumentsList = function() {
  return /** @type{!Array<!proto.types.TransactionArgument>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.TransactionArgument, 2));
};


/** @param {!Array<!proto.types.TransactionArgument>} value */
proto.types.Program.prototype.setArgumentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.types.TransactionArgument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.TransactionArgument}
 */
proto.types.Program.prototype.addArguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.types.TransactionArgument, opt_index);
};


proto.types.Program.prototype.clearArgumentsList = function() {
  this.setArgumentsList([]);
};


/**
 * repeated bytes modules = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.types.Program.prototype.getModulesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes modules = 3;
 * This is a type-conversion wrapper around `getModulesList()`
 * @return {!Array<string>}
 */
proto.types.Program.prototype.getModulesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getModulesList()));
};


/**
 * repeated bytes modules = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getModulesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.types.Program.prototype.getModulesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getModulesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.types.Program.prototype.setModulesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.types.Program.prototype.addModules = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.types.Program.prototype.clearModulesList = function() {
  this.setModulesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Script = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Script.repeatedFields_, null);
};
goog.inherits(proto.types.Script, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.Script.displayName = 'proto.types.Script';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Script.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Script.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Script.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Script} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Script.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: msg.getCode_asB64(),
    argumentsList: jspb.Message.toObjectList(msg.getArgumentsList(),
    proto.types.TransactionArgument.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Script}
 */
proto.types.Script.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Script;
  return proto.types.Script.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Script} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Script}
 */
proto.types.Script.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.types.TransactionArgument;
      reader.readMessage(value,proto.types.TransactionArgument.deserializeBinaryFromReader);
      msg.addArguments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Script.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Script.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Script} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Script.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getArgumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.types.TransactionArgument.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes code = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.Script.prototype.getCode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes code = 1;
 * This is a type-conversion wrapper around `getCode()`
 * @return {string}
 */
proto.types.Script.prototype.getCode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCode()));
};


/**
 * optional bytes code = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCode()`
 * @return {!Uint8Array}
 */
proto.types.Script.prototype.getCode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCode()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Script.prototype.setCode = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated TransactionArgument arguments = 2;
 * @return {!Array<!proto.types.TransactionArgument>}
 */
proto.types.Script.prototype.getArgumentsList = function() {
  return /** @type{!Array<!proto.types.TransactionArgument>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.TransactionArgument, 2));
};


/** @param {!Array<!proto.types.TransactionArgument>} value */
proto.types.Script.prototype.setArgumentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.types.TransactionArgument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.TransactionArgument}
 */
proto.types.Script.prototype.addArguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.types.TransactionArgument, opt_index);
};


proto.types.Script.prototype.clearArgumentsList = function() {
  this.setArgumentsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TransactionArgument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.TransactionArgument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.TransactionArgument.displayName = 'proto.types.TransactionArgument';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TransactionArgument.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TransactionArgument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TransactionArgument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionArgument.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TransactionArgument}
 */
proto.types.TransactionArgument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TransactionArgument;
  return proto.types.TransactionArgument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TransactionArgument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TransactionArgument}
 */
proto.types.TransactionArgument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.types.TransactionArgument.ArgType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TransactionArgument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TransactionArgument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TransactionArgument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionArgument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.types.TransactionArgument.ArgType = {
  U64: 0,
  ADDRESS: 1,
  STRING: 2,
  BYTEARRAY: 3
};

/**
 * optional ArgType type = 1;
 * @return {!proto.types.TransactionArgument.ArgType}
 */
proto.types.TransactionArgument.prototype.getType = function() {
  return /** @type {!proto.types.TransactionArgument.ArgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.types.TransactionArgument.ArgType} value */
proto.types.TransactionArgument.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.types.TransactionArgument.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.types.TransactionArgument.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.types.TransactionArgument.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.TransactionArgument.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Module = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.Module, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.Module.displayName = 'proto.types.Module';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Module.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Module.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Module} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Module.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: msg.getCode_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Module}
 */
proto.types.Module.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Module;
  return proto.types.Module.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Module} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Module}
 */
proto.types.Module.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Module.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Module.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Module} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Module.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes code = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.Module.prototype.getCode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes code = 1;
 * This is a type-conversion wrapper around `getCode()`
 * @return {string}
 */
proto.types.Module.prototype.getCode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCode()));
};


/**
 * optional bytes code = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCode()`
 * @return {!Uint8Array}
 */
proto.types.Module.prototype.getCode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCode()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Module.prototype.setCode = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.SignedTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.SignedTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.SignedTransaction.displayName = 'proto.types.SignedTransaction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.SignedTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.types.SignedTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.SignedTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.SignedTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawTxnBytes: msg.getRawTxnBytes_asB64(),
    senderPublicKey: msg.getSenderPublicKey_asB64(),
    senderSignature: msg.getSenderSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.SignedTransaction}
 */
proto.types.SignedTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.SignedTransaction;
  return proto.types.SignedTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.SignedTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.SignedTransaction}
 */
proto.types.SignedTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawTxnBytes(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderPublicKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.SignedTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.SignedTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.SignedTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.SignedTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawTxnBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSenderPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSenderSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes raw_txn_bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.SignedTransaction.prototype.getRawTxnBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes raw_txn_bytes = 1;
 * This is a type-conversion wrapper around `getRawTxnBytes()`
 * @return {string}
 */
proto.types.SignedTransaction.prototype.getRawTxnBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawTxnBytes()));
};


/**
 * optional bytes raw_txn_bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawTxnBytes()`
 * @return {!Uint8Array}
 */
proto.types.SignedTransaction.prototype.getRawTxnBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawTxnBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.SignedTransaction.prototype.setRawTxnBytes = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes sender_public_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.types.SignedTransaction.prototype.getSenderPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sender_public_key = 2;
 * This is a type-conversion wrapper around `getSenderPublicKey()`
 * @return {string}
 */
proto.types.SignedTransaction.prototype.getSenderPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderPublicKey()));
};


/**
 * optional bytes sender_public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderPublicKey()`
 * @return {!Uint8Array}
 */
proto.types.SignedTransaction.prototype.getSenderPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.SignedTransaction.prototype.setSenderPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes sender_signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.types.SignedTransaction.prototype.getSenderSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sender_signature = 3;
 * This is a type-conversion wrapper around `getSenderSignature()`
 * @return {string}
 */
proto.types.SignedTransaction.prototype.getSenderSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderSignature()));
};


/**
 * optional bytes sender_signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderSignature()`
 * @return {!Uint8Array}
 */
proto.types.SignedTransaction.prototype.getSenderSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.SignedTransaction.prototype.setSenderSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.SignedTransactionWithProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.SignedTransactionWithProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.SignedTransactionWithProof.displayName = 'proto.types.SignedTransactionWithProof';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.SignedTransactionWithProof.prototype.toObject = function(opt_includeInstance) {
  return proto.types.SignedTransactionWithProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.SignedTransactionWithProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.SignedTransactionWithProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    signedTransaction: (f = msg.getSignedTransaction()) && proto.types.SignedTransaction.toObject(includeInstance, f),
    proof: (f = msg.getProof()) && proof_pb.SignedTransactionProof.toObject(includeInstance, f),
    events: (f = msg.getEvents()) && events_pb.EventsList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.SignedTransactionWithProof}
 */
proto.types.SignedTransactionWithProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.SignedTransactionWithProof;
  return proto.types.SignedTransactionWithProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.SignedTransactionWithProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.SignedTransactionWithProof}
 */
proto.types.SignedTransactionWithProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.types.SignedTransaction;
      reader.readMessage(value,proto.types.SignedTransaction.deserializeBinaryFromReader);
      msg.setSignedTransaction(value);
      break;
    case 3:
      var value = new proof_pb.SignedTransactionProof;
      reader.readMessage(value,proof_pb.SignedTransactionProof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    case 4:
      var value = new events_pb.EventsList;
      reader.readMessage(value,events_pb.EventsList.deserializeBinaryFromReader);
      msg.setEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.SignedTransactionWithProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.SignedTransactionWithProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.SignedTransactionWithProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.SignedTransactionWithProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getSignedTransaction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.SignedTransaction.serializeBinaryToWriter
    );
  }
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proof_pb.SignedTransactionProof.serializeBinaryToWriter
    );
  }
  f = message.getEvents();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      events_pb.EventsList.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 version = 1;
 * @return {string}
 */
proto.types.SignedTransactionWithProof.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.types.SignedTransactionWithProof.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional SignedTransaction signed_transaction = 2;
 * @return {?proto.types.SignedTransaction}
 */
proto.types.SignedTransactionWithProof.prototype.getSignedTransaction = function() {
  return /** @type{?proto.types.SignedTransaction} */ (
    jspb.Message.getWrapperField(this, proto.types.SignedTransaction, 2));
};


/** @param {?proto.types.SignedTransaction|undefined} value */
proto.types.SignedTransactionWithProof.prototype.setSignedTransaction = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.types.SignedTransactionWithProof.prototype.clearSignedTransaction = function() {
  this.setSignedTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.SignedTransactionWithProof.prototype.hasSignedTransaction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SignedTransactionProof proof = 3;
 * @return {?proto.types.SignedTransactionProof}
 */
proto.types.SignedTransactionWithProof.prototype.getProof = function() {
  return /** @type{?proto.types.SignedTransactionProof} */ (
    jspb.Message.getWrapperField(this, proof_pb.SignedTransactionProof, 3));
};


/** @param {?proto.types.SignedTransactionProof|undefined} value */
proto.types.SignedTransactionWithProof.prototype.setProof = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.types.SignedTransactionWithProof.prototype.clearProof = function() {
  this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.SignedTransactionWithProof.prototype.hasProof = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EventsList events = 4;
 * @return {?proto.types.EventsList}
 */
proto.types.SignedTransactionWithProof.prototype.getEvents = function() {
  return /** @type{?proto.types.EventsList} */ (
    jspb.Message.getWrapperField(this, events_pb.EventsList, 4));
};


/** @param {?proto.types.EventsList|undefined} value */
proto.types.SignedTransactionWithProof.prototype.setEvents = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.types.SignedTransactionWithProof.prototype.clearEvents = function() {
  this.setEvents(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.SignedTransactionWithProof.prototype.hasEvents = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.SignedTransactionsBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.SignedTransactionsBlock.repeatedFields_, null);
};
goog.inherits(proto.types.SignedTransactionsBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.SignedTransactionsBlock.displayName = 'proto.types.SignedTransactionsBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.SignedTransactionsBlock.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.SignedTransactionsBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.types.SignedTransactionsBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.SignedTransactionsBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.SignedTransactionsBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.types.SignedTransaction.toObject, includeInstance),
    validatorPublicKey: msg.getValidatorPublicKey_asB64(),
    validatorSignature: msg.getValidatorSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.SignedTransactionsBlock}
 */
proto.types.SignedTransactionsBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.SignedTransactionsBlock;
  return proto.types.SignedTransactionsBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.SignedTransactionsBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.SignedTransactionsBlock}
 */
proto.types.SignedTransactionsBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.SignedTransaction;
      reader.readMessage(value,proto.types.SignedTransaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorPublicKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.SignedTransactionsBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.SignedTransactionsBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.SignedTransactionsBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.SignedTransactionsBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.SignedTransaction.serializeBinaryToWriter
    );
  }
  f = message.getValidatorPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getValidatorSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * repeated SignedTransaction transactions = 1;
 * @return {!Array<!proto.types.SignedTransaction>}
 */
proto.types.SignedTransactionsBlock.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.types.SignedTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.SignedTransaction, 1));
};


/** @param {!Array<!proto.types.SignedTransaction>} value */
proto.types.SignedTransactionsBlock.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.SignedTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.SignedTransaction}
 */
proto.types.SignedTransactionsBlock.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.SignedTransaction, opt_index);
};


proto.types.SignedTransactionsBlock.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};


/**
 * optional bytes validator_public_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.types.SignedTransactionsBlock.prototype.getValidatorPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes validator_public_key = 2;
 * This is a type-conversion wrapper around `getValidatorPublicKey()`
 * @return {string}
 */
proto.types.SignedTransactionsBlock.prototype.getValidatorPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorPublicKey()));
};


/**
 * optional bytes validator_public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorPublicKey()`
 * @return {!Uint8Array}
 */
proto.types.SignedTransactionsBlock.prototype.getValidatorPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.SignedTransactionsBlock.prototype.setValidatorPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes validator_signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.types.SignedTransactionsBlock.prototype.getValidatorSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes validator_signature = 3;
 * This is a type-conversion wrapper around `getValidatorSignature()`
 * @return {string}
 */
proto.types.SignedTransactionsBlock.prototype.getValidatorSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorSignature()));
};


/**
 * optional bytes validator_signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorSignature()`
 * @return {!Uint8Array}
 */
proto.types.SignedTransactionsBlock.prototype.getValidatorSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.SignedTransactionsBlock.prototype.setValidatorSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.WriteSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.WriteSet.repeatedFields_, null);
};
goog.inherits(proto.types.WriteSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.WriteSet.displayName = 'proto.types.WriteSet';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.WriteSet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.WriteSet.prototype.toObject = function(opt_includeInstance) {
  return proto.types.WriteSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.WriteSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.WriteSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    writeSetList: jspb.Message.toObjectList(msg.getWriteSetList(),
    proto.types.WriteOp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.WriteSet}
 */
proto.types.WriteSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.WriteSet;
  return proto.types.WriteSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.WriteSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.WriteSet}
 */
proto.types.WriteSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.WriteOp;
      reader.readMessage(value,proto.types.WriteOp.deserializeBinaryFromReader);
      msg.addWriteSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.WriteSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.WriteSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.WriteSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.WriteSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWriteSetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.WriteOp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WriteOp write_set = 1;
 * @return {!Array<!proto.types.WriteOp>}
 */
proto.types.WriteSet.prototype.getWriteSetList = function() {
  return /** @type{!Array<!proto.types.WriteOp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.WriteOp, 1));
};


/** @param {!Array<!proto.types.WriteOp>} value */
proto.types.WriteSet.prototype.setWriteSetList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.WriteOp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.WriteOp}
 */
proto.types.WriteSet.prototype.addWriteSet = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.WriteOp, opt_index);
};


proto.types.WriteSet.prototype.clearWriteSetList = function() {
  this.setWriteSetList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.WriteOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.WriteOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.WriteOp.displayName = 'proto.types.WriteOp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.WriteOp.prototype.toObject = function(opt_includeInstance) {
  return proto.types.WriteOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.WriteOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.WriteOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessPath: (f = msg.getAccessPath()) && access_path_pb.AccessPath.toObject(includeInstance, f),
    value: msg.getValue_asB64(),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.WriteOp}
 */
proto.types.WriteOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.WriteOp;
  return proto.types.WriteOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.WriteOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.WriteOp}
 */
proto.types.WriteOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new access_path_pb.AccessPath;
      reader.readMessage(value,access_path_pb.AccessPath.deserializeBinaryFromReader);
      msg.setAccessPath(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!proto.types.WriteOpType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.WriteOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.WriteOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.WriteOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.WriteOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessPath();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      access_path_pb.AccessPath.serializeBinaryToWriter
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional AccessPath access_path = 1;
 * @return {?proto.types.AccessPath}
 */
proto.types.WriteOp.prototype.getAccessPath = function() {
  return /** @type{?proto.types.AccessPath} */ (
    jspb.Message.getWrapperField(this, access_path_pb.AccessPath, 1));
};


/** @param {?proto.types.AccessPath|undefined} value */
proto.types.WriteOp.prototype.setAccessPath = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.types.WriteOp.prototype.clearAccessPath = function() {
  this.setAccessPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.WriteOp.prototype.hasAccessPath = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.types.WriteOp.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.types.WriteOp.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.types.WriteOp.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.WriteOp.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional WriteOpType type = 3;
 * @return {!proto.types.WriteOpType}
 */
proto.types.WriteOp.prototype.getType = function() {
  return /** @type {!proto.types.WriteOpType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.types.WriteOpType} value */
proto.types.WriteOp.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.AccountState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.AccountState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.AccountState.displayName = 'proto.types.AccountState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.AccountState.prototype.toObject = function(opt_includeInstance) {
  return proto.types.AccountState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.AccountState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.AccountState.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    blob: msg.getBlob_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.AccountState}
 */
proto.types.AccountState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.AccountState;
  return proto.types.AccountState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.AccountState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.AccountState}
 */
proto.types.AccountState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.AccountState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.AccountState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.AccountState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.AccountState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBlob_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.AccountState.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.types.AccountState.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.types.AccountState.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.AccountState.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes blob = 2;
 * @return {!(string|Uint8Array)}
 */
proto.types.AccountState.prototype.getBlob = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes blob = 2;
 * This is a type-conversion wrapper around `getBlob()`
 * @return {string}
 */
proto.types.AccountState.prototype.getBlob_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlob()));
};


/**
 * optional bytes blob = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlob()`
 * @return {!Uint8Array}
 */
proto.types.AccountState.prototype.getBlob_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlob()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.AccountState.prototype.setBlob = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TransactionToCommit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.TransactionToCommit.repeatedFields_, null);
};
goog.inherits(proto.types.TransactionToCommit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.TransactionToCommit.displayName = 'proto.types.TransactionToCommit';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.TransactionToCommit.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TransactionToCommit.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TransactionToCommit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TransactionToCommit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionToCommit.toObject = function(includeInstance, msg) {
  var f, obj = {
    signedTxn: (f = msg.getSignedTxn()) && proto.types.SignedTransaction.toObject(includeInstance, f),
    accountStatesList: jspb.Message.toObjectList(msg.getAccountStatesList(),
    proto.types.AccountState.toObject, includeInstance),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    events_pb.Event.toObject, includeInstance),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 4, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TransactionToCommit}
 */
proto.types.TransactionToCommit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TransactionToCommit;
  return proto.types.TransactionToCommit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TransactionToCommit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TransactionToCommit}
 */
proto.types.TransactionToCommit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.SignedTransaction;
      reader.readMessage(value,proto.types.SignedTransaction.deserializeBinaryFromReader);
      msg.setSignedTxn(value);
      break;
    case 2:
      var value = new proto.types.AccountState;
      reader.readMessage(value,proto.types.AccountState.deserializeBinaryFromReader);
      msg.addAccountStates(value);
      break;
    case 3:
      var value = new events_pb.Event;
      reader.readMessage(value,events_pb.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGasUsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TransactionToCommit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TransactionToCommit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TransactionToCommit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionToCommit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignedTxn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.SignedTransaction.serializeBinaryToWriter
    );
  }
  f = message.getAccountStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.types.AccountState.serializeBinaryToWriter
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      events_pb.Event.serializeBinaryToWriter
    );
  }
  f = message.getGasUsed();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      4,
      f
    );
  }
};


/**
 * optional SignedTransaction signed_txn = 1;
 * @return {?proto.types.SignedTransaction}
 */
proto.types.TransactionToCommit.prototype.getSignedTxn = function() {
  return /** @type{?proto.types.SignedTransaction} */ (
    jspb.Message.getWrapperField(this, proto.types.SignedTransaction, 1));
};


/** @param {?proto.types.SignedTransaction|undefined} value */
proto.types.TransactionToCommit.prototype.setSignedTxn = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.types.TransactionToCommit.prototype.clearSignedTxn = function() {
  this.setSignedTxn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.TransactionToCommit.prototype.hasSignedTxn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AccountState account_states = 2;
 * @return {!Array<!proto.types.AccountState>}
 */
proto.types.TransactionToCommit.prototype.getAccountStatesList = function() {
  return /** @type{!Array<!proto.types.AccountState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.AccountState, 2));
};


/** @param {!Array<!proto.types.AccountState>} value */
proto.types.TransactionToCommit.prototype.setAccountStatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.types.AccountState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.AccountState}
 */
proto.types.TransactionToCommit.prototype.addAccountStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.types.AccountState, opt_index);
};


proto.types.TransactionToCommit.prototype.clearAccountStatesList = function() {
  this.setAccountStatesList([]);
};


/**
 * repeated Event events = 3;
 * @return {!Array<!proto.types.Event>}
 */
proto.types.TransactionToCommit.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.types.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, events_pb.Event, 3));
};


/** @param {!Array<!proto.types.Event>} value */
proto.types.TransactionToCommit.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.types.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Event}
 */
proto.types.TransactionToCommit.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.types.Event, opt_index);
};


proto.types.TransactionToCommit.prototype.clearEventsList = function() {
  this.setEventsList([]);
};


/**
 * optional uint64 gas_used = 4;
 * @return {string}
 */
proto.types.TransactionToCommit.prototype.getGasUsed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/** @param {string} value */
proto.types.TransactionToCommit.prototype.setGasUsed = function(value) {
  jspb.Message.setProto3StringIntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TransactionListWithProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.TransactionListWithProof.repeatedFields_, null);
};
goog.inherits(proto.types.TransactionListWithProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.TransactionListWithProof.displayName = 'proto.types.TransactionListWithProof';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.TransactionListWithProof.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TransactionListWithProof.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TransactionListWithProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TransactionListWithProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionListWithProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.types.SignedTransaction.toObject, includeInstance),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    transaction_info_pb.TransactionInfo.toObject, includeInstance),
    eventsForVersions: (f = msg.getEventsForVersions()) && events_pb.EventsForVersions.toObject(includeInstance, f),
    firstTransactionVersion: (f = msg.getFirstTransactionVersion()) && google_protobuf_wrappers_pb.UInt64Value.toObject(includeInstance, f),
    proofOfFirstTransaction: (f = msg.getProofOfFirstTransaction()) && proof_pb.AccumulatorProof.toObject(includeInstance, f),
    proofOfLastTransaction: (f = msg.getProofOfLastTransaction()) && proof_pb.AccumulatorProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TransactionListWithProof}
 */
proto.types.TransactionListWithProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TransactionListWithProof;
  return proto.types.TransactionListWithProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TransactionListWithProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TransactionListWithProof}
 */
proto.types.TransactionListWithProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.SignedTransaction;
      reader.readMessage(value,proto.types.SignedTransaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 2:
      var value = new transaction_info_pb.TransactionInfo;
      reader.readMessage(value,transaction_info_pb.TransactionInfo.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    case 3:
      var value = new events_pb.EventsForVersions;
      reader.readMessage(value,events_pb.EventsForVersions.deserializeBinaryFromReader);
      msg.setEventsForVersions(value);
      break;
    case 4:
      var value = new google_protobuf_wrappers_pb.UInt64Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.UInt64Value.deserializeBinaryFromReader);
      msg.setFirstTransactionVersion(value);
      break;
    case 5:
      var value = new proof_pb.AccumulatorProof;
      reader.readMessage(value,proof_pb.AccumulatorProof.deserializeBinaryFromReader);
      msg.setProofOfFirstTransaction(value);
      break;
    case 6:
      var value = new proof_pb.AccumulatorProof;
      reader.readMessage(value,proof_pb.AccumulatorProof.deserializeBinaryFromReader);
      msg.setProofOfLastTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TransactionListWithProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TransactionListWithProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TransactionListWithProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TransactionListWithProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.SignedTransaction.serializeBinaryToWriter
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      transaction_info_pb.TransactionInfo.serializeBinaryToWriter
    );
  }
  f = message.getEventsForVersions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      events_pb.EventsForVersions.serializeBinaryToWriter
    );
  }
  f = message.getFirstTransactionVersion();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_wrappers_pb.UInt64Value.serializeBinaryToWriter
    );
  }
  f = message.getProofOfFirstTransaction();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proof_pb.AccumulatorProof.serializeBinaryToWriter
    );
  }
  f = message.getProofOfLastTransaction();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proof_pb.AccumulatorProof.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SignedTransaction transactions = 1;
 * @return {!Array<!proto.types.SignedTransaction>}
 */
proto.types.TransactionListWithProof.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.types.SignedTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.SignedTransaction, 1));
};


/** @param {!Array<!proto.types.SignedTransaction>} value */
proto.types.TransactionListWithProof.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.SignedTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.SignedTransaction}
 */
proto.types.TransactionListWithProof.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.SignedTransaction, opt_index);
};


proto.types.TransactionListWithProof.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};


/**
 * repeated TransactionInfo infos = 2;
 * @return {!Array<!proto.types.TransactionInfo>}
 */
proto.types.TransactionListWithProof.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.types.TransactionInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, transaction_info_pb.TransactionInfo, 2));
};


/** @param {!Array<!proto.types.TransactionInfo>} value */
proto.types.TransactionListWithProof.prototype.setInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.types.TransactionInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.TransactionInfo}
 */
proto.types.TransactionListWithProof.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.types.TransactionInfo, opt_index);
};


proto.types.TransactionListWithProof.prototype.clearInfosList = function() {
  this.setInfosList([]);
};


/**
 * optional EventsForVersions events_for_versions = 3;
 * @return {?proto.types.EventsForVersions}
 */
proto.types.TransactionListWithProof.prototype.getEventsForVersions = function() {
  return /** @type{?proto.types.EventsForVersions} */ (
    jspb.Message.getWrapperField(this, events_pb.EventsForVersions, 3));
};


/** @param {?proto.types.EventsForVersions|undefined} value */
proto.types.TransactionListWithProof.prototype.setEventsForVersions = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.types.TransactionListWithProof.prototype.clearEventsForVersions = function() {
  this.setEventsForVersions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.TransactionListWithProof.prototype.hasEventsForVersions = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.UInt64Value first_transaction_version = 4;
 * @return {?proto.google.protobuf.UInt64Value}
 */
proto.types.TransactionListWithProof.prototype.getFirstTransactionVersion = function() {
  return /** @type{?proto.google.protobuf.UInt64Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.UInt64Value, 4));
};


/** @param {?proto.google.protobuf.UInt64Value|undefined} value */
proto.types.TransactionListWithProof.prototype.setFirstTransactionVersion = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.types.TransactionListWithProof.prototype.clearFirstTransactionVersion = function() {
  this.setFirstTransactionVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.TransactionListWithProof.prototype.hasFirstTransactionVersion = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AccumulatorProof proof_of_first_transaction = 5;
 * @return {?proto.types.AccumulatorProof}
 */
proto.types.TransactionListWithProof.prototype.getProofOfFirstTransaction = function() {
  return /** @type{?proto.types.AccumulatorProof} */ (
    jspb.Message.getWrapperField(this, proof_pb.AccumulatorProof, 5));
};


/** @param {?proto.types.AccumulatorProof|undefined} value */
proto.types.TransactionListWithProof.prototype.setProofOfFirstTransaction = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.types.TransactionListWithProof.prototype.clearProofOfFirstTransaction = function() {
  this.setProofOfFirstTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.TransactionListWithProof.prototype.hasProofOfFirstTransaction = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional AccumulatorProof proof_of_last_transaction = 6;
 * @return {?proto.types.AccumulatorProof}
 */
proto.types.TransactionListWithProof.prototype.getProofOfLastTransaction = function() {
  return /** @type{?proto.types.AccumulatorProof} */ (
    jspb.Message.getWrapperField(this, proof_pb.AccumulatorProof, 6));
};


/** @param {?proto.types.AccumulatorProof|undefined} value */
proto.types.TransactionListWithProof.prototype.setProofOfLastTransaction = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.types.TransactionListWithProof.prototype.clearProofOfLastTransaction = function() {
  this.setProofOfLastTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.TransactionListWithProof.prototype.hasProofOfLastTransaction = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * @enum {number}
 */
proto.types.WriteOpType = {
  WRITE: 0,
  DELETE: 1
};

goog.object.extend(exports, proto.types);
