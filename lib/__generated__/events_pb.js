/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var access_path_pb = require('./access_path_pb.js');
goog.object.extend(proto, access_path_pb);
var proof_pb = require('./proof_pb.js');
goog.object.extend(proto, proof_pb);
goog.exportSymbol('proto.types.Event', null, global);
goog.exportSymbol('proto.types.EventWithProof', null, global);
goog.exportSymbol('proto.types.EventsForVersions', null, global);
goog.exportSymbol('proto.types.EventsList', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.Event.displayName = 'proto.types.Event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    eventData: msg.getEventData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Event}
 */
proto.types.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Event;
  return proto.types.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Event}
 */
proto.types.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setSequenceNumber(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEventData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSequenceNumber();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getEventData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.Event.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.types.Event.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.types.Event.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Event.prototype.setKey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 sequence_number = 2;
 * @return {string}
 */
proto.types.Event.prototype.getSequenceNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.types.Event.prototype.setSequenceNumber = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional bytes event_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.types.Event.prototype.getEventData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes event_data = 3;
 * This is a type-conversion wrapper around `getEventData()`
 * @return {string}
 */
proto.types.Event.prototype.getEventData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEventData()));
};


/**
 * optional bytes event_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEventData()`
 * @return {!Uint8Array}
 */
proto.types.Event.prototype.getEventData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEventData()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Event.prototype.setEventData = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.EventWithProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.EventWithProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.EventWithProof.displayName = 'proto.types.EventWithProof';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.EventWithProof.prototype.toObject = function(opt_includeInstance) {
  return proto.types.EventWithProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.EventWithProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.EventWithProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionVersion: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    eventIndex: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    event: (f = msg.getEvent()) && proto.types.Event.toObject(includeInstance, f),
    proof: (f = msg.getProof()) && proof_pb.EventProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.EventWithProof}
 */
proto.types.EventWithProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.EventWithProof;
  return proto.types.EventWithProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.EventWithProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.EventWithProof}
 */
proto.types.EventWithProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setTransactionVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setEventIndex(value);
      break;
    case 3:
      var value = new proto.types.Event;
      reader.readMessage(value,proto.types.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 4:
      var value = new proof_pb.EventProof;
      reader.readMessage(value,proof_pb.EventProof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.EventWithProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.EventWithProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.EventWithProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.EventWithProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionVersion();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getEventIndex();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.types.Event.serializeBinaryToWriter
    );
  }
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proof_pb.EventProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 transaction_version = 1;
 * @return {string}
 */
proto.types.EventWithProof.prototype.getTransactionVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.types.EventWithProof.prototype.setTransactionVersion = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 event_index = 2;
 * @return {string}
 */
proto.types.EventWithProof.prototype.getEventIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.types.EventWithProof.prototype.setEventIndex = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional Event event = 3;
 * @return {?proto.types.Event}
 */
proto.types.EventWithProof.prototype.getEvent = function() {
  return /** @type{?proto.types.Event} */ (
    jspb.Message.getWrapperField(this, proto.types.Event, 3));
};


/** @param {?proto.types.Event|undefined} value */
proto.types.EventWithProof.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.types.EventWithProof.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.EventWithProof.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EventProof proof = 4;
 * @return {?proto.types.EventProof}
 */
proto.types.EventWithProof.prototype.getProof = function() {
  return /** @type{?proto.types.EventProof} */ (
    jspb.Message.getWrapperField(this, proof_pb.EventProof, 4));
};


/** @param {?proto.types.EventProof|undefined} value */
proto.types.EventWithProof.prototype.setProof = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.types.EventWithProof.prototype.clearProof = function() {
  this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.EventWithProof.prototype.hasProof = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.EventsList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.EventsList.repeatedFields_, null);
};
goog.inherits(proto.types.EventsList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.EventsList.displayName = 'proto.types.EventsList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.EventsList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.EventsList.prototype.toObject = function(opt_includeInstance) {
  return proto.types.EventsList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.EventsList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.EventsList.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.types.Event.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.EventsList}
 */
proto.types.EventsList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.EventsList;
  return proto.types.EventsList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.EventsList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.EventsList}
 */
proto.types.EventsList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.Event;
      reader.readMessage(value,proto.types.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.EventsList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.EventsList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.EventsList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.EventsList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.Event.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Event events = 1;
 * @return {!Array<!proto.types.Event>}
 */
proto.types.EventsList.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.types.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Event, 1));
};


/** @param {!Array<!proto.types.Event>} value */
proto.types.EventsList.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Event}
 */
proto.types.EventsList.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Event, opt_index);
};


proto.types.EventsList.prototype.clearEventsList = function() {
  this.setEventsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.EventsForVersions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.EventsForVersions.repeatedFields_, null);
};
goog.inherits(proto.types.EventsForVersions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.EventsForVersions.displayName = 'proto.types.EventsForVersions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.EventsForVersions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.EventsForVersions.prototype.toObject = function(opt_includeInstance) {
  return proto.types.EventsForVersions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.EventsForVersions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.EventsForVersions.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsForVersionList: jspb.Message.toObjectList(msg.getEventsForVersionList(),
    proto.types.EventsList.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.EventsForVersions}
 */
proto.types.EventsForVersions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.EventsForVersions;
  return proto.types.EventsForVersions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.EventsForVersions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.EventsForVersions}
 */
proto.types.EventsForVersions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.EventsList;
      reader.readMessage(value,proto.types.EventsList.deserializeBinaryFromReader);
      msg.addEventsForVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.EventsForVersions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.EventsForVersions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.EventsForVersions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.EventsForVersions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsForVersionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.EventsList.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EventsList events_for_version = 1;
 * @return {!Array<!proto.types.EventsList>}
 */
proto.types.EventsForVersions.prototype.getEventsForVersionList = function() {
  return /** @type{!Array<!proto.types.EventsList>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.EventsList, 1));
};


/** @param {!Array<!proto.types.EventsList>} value */
proto.types.EventsForVersions.prototype.setEventsForVersionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.EventsList=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.EventsList}
 */
proto.types.EventsForVersions.prototype.addEventsForVersion = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.EventsList, opt_index);
};


proto.types.EventsForVersions.prototype.clearEventsForVersionList = function() {
  this.setEventsForVersionList([]);
};


goog.object.extend(exports, proto.types);
